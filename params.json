{"name":"cssSweet","tagline":"Suite of CSS (and JS) tools for MODX CMS","body":"cssSweet\r\n=========================================\r\nVersion: 2.0.0-rc1\r\n\r\nAuthor: YJ Tso (@sepiariver) [on Twitter](https://twitter.com/sepiariver)\r\n\r\ncssSweet is a suite of tools for processing (S)CSS. It comes with several output modifiers to modify CSS values, and a plugin that concatenates and processes (S)CSS from specified Chunks and outputs to a minified CSS file. version 2+ also concatenates and minifies JS with a 2nd plugin.\r\n\r\nThe documentation site is here: \r\n\r\nhttp://sepiariver.github.io/cssSweet\r\n\r\nas well as here:\r\n\r\nhttp://rtfm.modx.com/extras/revo/csssweet (this one needs updating)\r\n\r\n## Example Use Cases\r\n- Use system or context settings to store primary colors in a site's color scheme, then process all other color values relative to these, so you can shift the entire color theme by modifying a few settings.\r\n- Use in conjunction with ClientConfig to give site owners a nice UI to manage CSS styles--but only the ones you expose, and only in the manner you choose!\r\n- Author MODX \"themes\" that are customizable by the end user.\r\n- Use other MODX tags & placeholders in your CSS--limitless possibilities! Utilize \"dynamic CSS\" without the performance penalty, because the plugin writes the static CSS file on the Manager Clear Cache and Chunk Save actions, not per request.\r\n- Add a code editor like Ace, and you can use MODX as your IDE for front-end development.\r\n\r\n## Potentially Breaking Changes in Version 2\r\nThe utmost care has been taken to ensure that upgrades of cssSweet are as safe as possible. However, there are a few scenarios that could potentially break an existing site, when you upgrade cssSweet from version 1 to version 2+. Hopefully the following points will help you avoid those:\r\n\r\n1. **The default property set.** I haven't found a way to update the saveCustomCss plugin without overwriting the default property set. If you've  customized the default property set, I recommend exporting it before performing the upgrade. You can then re-import your property set after upgrading, to restore custom values. However:\r\n2. **Some property keys have changed.** Most notably, `custom_css_chunk` is now `custom_scss_chunks` to more accurately describe the plugin's actions. Ensure that after upgrading, your CSS Chunk names are listed in the new property, rather than the old one. I figured a major version upgrade is the most opportune time to change property keys.\r\n3. **The sample Chunk has a different name.** This served 2 purposes: to demonstrate the scss syntax compatibility, and prevent overwriting the default Chunk on upgrade, because some users (including myself) erroneously customized the default Chunk without changing its name. As with any MODX Extra that installs Chunks, it's highly recommended that you create new Chunks or rename the sample Chunk. That said, the cssSweet 2.x packages have been authored to *not* overwrite existing Chunks (with the help of @TheBoxer 's GitPackageManagement component), but I've tested this minimally.\r\n4. **The default output filename has changed.** In an effort to prevent overwriting your existing compiled CSS before you've had a chance to set the properties correctly, I've changed the default CSS output filename. However, if by sheer chance, you had previously customized your output filename to `custom_css.min.css`, then the saveCustomCss plugin will overwrite it by default! In this (probably rare) case, _*make sure*_ to setup the plugin properties correctly before executing the plugin.\r\n\r\n## Usage\r\n\r\n### Installation\r\nYou can install cssSweet via the MODX Extras Installer. Or you can download it from the [_packages directory](https://github.com/sepiariver/cssSweet/tree/master/_packages). You would upload it to the packages subdirectory of your MODX install's core directory, and use the \"Search Locally for Packages\" feature in the Extras Installer to find and install the package.\r\n\r\n### CSS Sweetness\r\nOnce installed, you'll have a default Chunk in the \"cssSweet\" category. If you edit that Chunk and click the \"Manage\" Â» \"Clear Cache\" main menu item, a CSS file will be generated for you at \r\n`[[++assets_path]]components/csssweet/custom_css.min.css`\r\n\r\nNote: it's highly recommended to create new Chunks with unique names. As of version 2.x, the cssSweet package has been configured to _not_ update an existing Chunk with the same name, but I haven't tested that thoroughly yet. I'd hate for it to fail in your production environment.\r\n\r\nReference the generated CSS file in your template, like this \r\n`<link rel=\"stylesheet\" href=\"[[++assets_path]]components/csssweet/custom_css.min.css\">`\r\nand you'll be good to go.\r\n\r\n### Customization\r\nIn the Plugin properties, you can set the names of Chunks that you wish to process and include, in a comma-separated list. (As of version 2, this is required for the plugin to do anything.) \r\n\r\nNote you can include static Chunks that reference files--even minified files. You can also customize the filesystem location to which to write the output file. Chunks will be included in the order which they appear in the comma-separated list. As of version 2, cssSweet will parse any SCSS syntax in your Chunks, and log error messages generated by the scssphp processor class.\r\n![Screenshot](https://www.dropbox.com/s/b118dgvuk31xzni/Screenshot%202015-05-04%2012.25.19.png?dl=1)\r\n\r\n### Events\r\nYou can optionally enable the `OnChunkFormSave` Event in the Plugin events tab. (As of version 2, this event is enabled by default.)\r\n![Screenshot](https://www.dropbox.com/s/9diyvnu04mx15vd/Screenshot%202015-04-01%2011.01.16.png?dl=1)\r\nDoing so will speed up your process immensely, as a new output file will be generated each time you save a Chunk that is in the list of Chunks you've set.\r\n\r\n### \"Dev\" Mode\r\nThere's a new set of properties for firing the plugins in dev mode. By enabling dev mode, the plugin will use the properties prefixed with `dev_`, allowing you to process a different set of Chunks, output to a different file. You can then call some conditional on your site, like: \r\n\r\n```\r\n[[!+modx.user.id:is=`0`:then=`<link rel=\"stylesheet\" href=\"prod.css\">`:else=`<link rel=\"stylesheet\" href=\"dev.css\">`]]\r\n```\r\nGranted this tag would be uncacheable and therefore this method shouldn't be used on busy production sites, but there are potentially other uses for dev mode.\r\n\r\n## Thanks\r\nA lot of time, research and consideration was put into which libraries should be included in this package, for the minification functions. I whole-heartedly support these fine developers and their open-source projects. Please extend your thanks to these folks, if you find cssSsweet useful (or even if you don't :P)\r\n\r\n[@leafo/scssphp] (https://github.com/leafo/scssphp)\r\n\r\n[@tedious/Jshrink] (https://github.com/tedious/JShrink)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}